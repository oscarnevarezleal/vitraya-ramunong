name: show_forks

on:
  push:
    branches:
      - dev
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  serve:
    runs-on: ubuntu-latest
    steps:
      - run: |
          forks="$(gh api graphql -F owner=$OWNER -F name=$REPO -f query='
            query ($name: String!, $owner: String!) {
              repository(owner: $owner, name: $name) {
                forkCount
                forks(first: 10, orderBy: {field: NAME, direction: DESC}) {
                  totalCount
                  nodes {
                    owner {
                      id
                      login
                      avatarUrl
                    }
                    name
                    nameWithOwner
                  }
                }
              }
            }
          ' --jq '.data.repository.forks.nodes')"
          echo $forks
          echo 'REPO_FORKS='$forks >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
      - run: |
          echo "# Forks" >> FORKS.md
          echo "## Here's the list of forks" >> FORKS.md
          for row in $(echo "${REPO_FORKS}" | jq -r '.[] | @base64'); do
              _jq() {
               echo ${row} | base64 --decode | jq -r ${1}
              }
              login=$(_jq '.owner.login')
              avatarUrl=$(_jq '.owner.avatarUrl')

              node=$(curl -s https://api.github.com/repos/${OWNER}/${REPO}/compare/main...${login}:main | \
                jq 'with_entries(if (.key|test("(ahead|behind)")) then ( {key: .key, value: .value } ) else empty end )')

              _jqNode() {
               echo ${node} | jq -r ${1}
              }

              echo $node
              echo "- ![$login]($avatarUrl) is $(_jqNode '.ahead_by') ahead" >> FORKS.md
              echo "and, $(_jqNode '.ahead_by') behind" >> FORKS.md
              echo " " >> FORKS.md
          done
          cat FORKS.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}